//g++  5.4.0
 
#include<bits/stdc++.h>
using namespace std;
 
#define int long long
#define pb push_back
#define pii pair<int,int>
#define ff first
#define ss second
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ; 
using namespace std;
 
vector<vector<pair<int,int> > >adj;
priority_queue<pair<int,pair<int,int> >,vector<pair<int,pair<int,int> > >,greater<pair<int,pair<int,int> > > >q;
int vis[100005][2];
int dis[100005][2];
 
void dikstra()
{
    q.push({0,{0,0}});
    while (!q.empty())
    {
        pair<int,pair<int,int> >p=q.top();
        q.pop();
        if(vis[p.second.first][p.second.second])
            continue;
        for(auto i:adj[p.second.first])
        {
            if(p.second.second)
            {
                if(dis[i.first][1]>dis[p.second.first][1]+i.second)
                {
                    dis[i.first][1]=dis[p.second.first][1]+i.second;
                    q.push({dis[i.first][1],{i.first,1}});
                }
            }
            else
            {
                if(dis[i.first][1]>dis[p.second.first][1]+i.second)
                {
                    dis[i.first][1]=dis[p.second.first][1]+i.second;
                    q.push({dis[i.first][1],{i.first,1}});
                }
 
                if(dis[i.first][0]>dis[p.second.first][0]+i.second)
                {
                    dis[i.first][0]=dis[p.second.first][0]+i.second;
                    q.push({dis[i.first][0],{i.first,0}});
                }
 
                if(dis[i.first][1]>dis[p.second.first][0]+i.second/2)
                {
                    dis[i.first][1]=dis[p.second.first][0]+i.second/2;
                    q.push({dis[i.first][1],{i.first,1}});
                }
 
            }
        }
    }
}
 
 
signed main()
{
    fast;
    int n,m;
    cin>>n>>m;
 
    int x,y,z;
    fill_n(&dis[0][0],100005*2,1e17);
 
    dis[0][0]=0;
    dis[0][1]=0;
    adj.resize(n+1);
    for (int i = 0; i < m; ++i) {
        cin>>x>>y>>z;
        x--;
        y--;
        adj[x].push_back({y,z});
    }
 
    dikstra();
 
    cout<<min(dis[n-1][0],dis[n-1][1]);
 
}
