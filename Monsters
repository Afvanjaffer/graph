//g++  5.4.0
 
#include<bits/stdc++.h>
using namespace std;
 
#define ff first
#define ss second
#define int long long
#define pb push_back
#define pii pair< int,int >
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
 
const int nax = 1e3+10;
char c[nax][nax];
int n, m;
 
struct node
{
    int x,y,d;
    bool operator!=( node const &p1 ) const{
        return !(p1.x == x && p1.y == y && p1.d == d);
    }
};
 
bool ok(int x,int y)
{
    if( x >= 0 && x<n && y>=0 && y<m)
        return 1;
    return 0;
}
bool check(node p )
{
    int mx = p.d;
    p.d = 0;
    queue< node > q;
    q.push(p);
    bool vis[n][m];
    memset(vis,0,sizeof(vis));
    
    while( !q.empty() )
    {
        p = q.front();
        q.pop();
        vis[p.x][p.y] = 1;
        if( p.d == mx ) continue;
        if( ok(p.x-1,p.y) && !vis[p.x-1][p.y] )
        {
            if( c[p.x-1][p.y] == 'M' ) return 0;
            if( c[p.x-1][p.y] == '.' ) q.push( {p.x-1,p.y,p.d+1});
        }
        
        if( ok(p.x,p.y-1) && !vis[p.x][p.y-1] )
        {
            if( c[p.x][p.y-1] == 'M' ) return 0;
            if( c[p.x][p.y-1] == '.' ) q.push( {p.x,p.y-1,p.d+1});
        }
        
        if( ok(p.x+1,p.y) && !vis[p.x+1][p.y] )
        {
            if( c[p.x+1][p.y] == 'M' ) return 0;
            if( c[p.x+1][p.y] == '.' ) q.push( {p.x+1,p.y,p.d+1});
        }
        
        if( ok(p.x,p.y+1) && !vis[p.x][p.y+1] )
        {
            if( c[p.x][p.y+1] == 'M' ) return 0;
            if( c[p.x][p.y+1] == '.' ) q.push( {p.x,p.y+1,p.d+1});
        }
    }
    return 1;
}
signed main()
{
    fast;
    cin >> n >> m;
    node st;
    for(int i=0; i<n; i++ )
    {
        for(int j=0;j<m; j++ )
        {
            cin >> c[i][j]; 
            if( c[i][j] == 'A' ) 
                st.x = i , st.y = j , st.d = 0;
        }
    }
    //cout << st.x << " " << st.y << " " << st.d << "\n";
    queue< node > q;
    q.push(st);
    bool vis[n][m];
    pii par[n][m];
    memset(vis,0,sizeof(vis));
    while( !q.empty() )
    {
        node p = q.front();
        //cout << p.x << " " << p.y << " " << p.d << "\n";
        q.pop();
        vis[p.x][p.y] = 1;
        
        if( (p.x == 0 || p.y == 0 || p.x == n-1 || p.y == m-1 ) && check( p ) ) 
        {
            cout << "YES\n" << p.d << "\n";
            stack<char> s;
         
            while( p != st )
            {
                pii cur = { p.x,  p.y };
                if( p.x > par[p.x][p.y].ff ) s.push('D');
                else if( p.x < par[p.x][p.y].ff ) s.push('U');
                else if( p.y > par[p.x][p.y].ss ) s.push('R');
                else  s.push('L');
                p.x = par[cur.ff][cur.ss].ff;
                p.y = par[cur.ff][cur.ss].ss;
                p.d--;
            }
            while( !s.empty() )
            {
                cout << s.top() ;
                s.pop();
            }
            return 0;
        }
        
        if( ok(p.x-1,p.y) && !vis[p.x-1][p.y] )
        {
            //if( c[p.x-1][p.y] == 'M' ) return 0;
            if( c[p.x-1][p.y] == '.' ) q.push( {p.x-1,p.y,p.d+1}), par[p.x-1][p.y] = {p.x,p.y};
        }
        
        if( ok(p.x,p.y-1) && !vis[p.x][p.y-1] )
        {
            //if( c[p.x][p.y-1] == 'M' ) return 0;
            if( c[p.x][p.y-1] == '.' ) q.push( {p.x,p.y-1,p.d+1}), par[p.x][p.y-1] = {p.x,p.y};
        }
        
        if( ok(p.x+1,p.y) && !vis[p.x+1][p.y] )
        {
            //if( c[p.x+1][p.y] == 'M' ) return 0;
            if( c[p.x+1][p.y] == '.' ) q.push( {p.x+1,p.y,p.d+1}), par[p.x+1][p.y] = {p.x,p.y};
        }
        
        if( ok(p.x,p.y+1) && !vis[p.x][p.y+1] )
        {
            //if( c[p.x][p.y+1] == 'M' ) return 0;
            if( c[p.x][p.y+1] == '.' ) q.push( {p.x,p.y+1,p.d+1}), par[p.x][p.y+1] = {p.x,p.y};
        }
    }
    cout << "NO";
}
