//g++  5.4.0
 
#include<bits/stdc++.h>
using namespace std;
 
#define int long long
#define pb push_back
#define pii pair<int,int>
#define ff first
#define ss second
#define fast ios::sync_with_stdio(0) , cin.tie(0) , cout.tie(0) ;
 
const int nax = 1e5+1;
vector< int > posm[nax] , negm[nax] , posn[nax] , negn[nax] , a(nax,0) , b(nax,0) ,ans(nax,-1) , use(nax,0);
 
signed main()
{
    fast;
    int n,m;
    cin >> n >> m;
    for(int i=1 ; i<=n ; i++ )
    {
        char x,z;
        int y,w;
        cin >> x >> y >> z >> w;
        if( x=='+' ) posn[i].pb(y), posm[y].pb(i), a[y]++;
        else         negn[i].pb(y), negm[y].pb(i), b[y]++;
        if( z=='+' ) posn[i].pb(w), posm[w].pb(i), a[w]++;
        else         negn[i].pb(w), negm[w].pb(i), b[w]++;
    }
    set<pair<pii,int> , greater<pair<pii,int>> > pq;
    for(int i=1 ; i<=m ; i++ )
    {
        int f= 0 ;
        if( a[i] )pq.insert({{a[i],i},0}) , f=1;
        if( b[i] )pq.insert({{b[i],i},1}) , f=1;
        if( !f ) ans[i] = 1;
    }
    while( !pq.empty() )
    {
        pair<pii,int> p = *pq.begin();
        int val = p.ff.ff;
        int node = p.ff.ss;
        int sign = p.ss;
        auto it = pq.begin();
        pq.erase( it );
        if( ans[node] != -1 ) continue;
        
        if( !sign )
        {
            ans[node] = 0;
            for( auto &i : posm[node] )
            {
                use[i] = 1;
                for( auto &j : posn[i] )
                {
                    if(pq.find( {{a[j],j},0} ) != pq.end() )
                    {
                        pq.erase( pq.find( {{a[j],j},0} ));
                    a[j]--;
                    if( a[j] != 0 )
                        pq.insert( {{a[j],j},0} );}
                }
                for( auto &j : negn[i] )
                {
                    if( pq.find( {{b[j],j},1} ) != pq.end() )
                    {
                    pq.erase( pq.find( {{b[j],j},1} ) );
                    b[j]--;
                    if( b[j] != 0 )
                        pq.insert( {{b[j],j},1} );}
                }
            }
        }
        else
        {
            ans[node] = 1;
            for( auto &i : negm[node] )
            {
                use[i] = 1;
                for( auto &j : posn[i] )
                {
                    if(pq.find( {{a[j],j},0} ) != pq.end() ){
                        pq.erase( pq.find( {{a[j],j},0} ));
                    a[j]--;
                    if( a[j] != 0 )
                        pq.insert( {{a[j],j},0} );}
                }
                for( auto &j : negn[i] )
                {
                    if( pq.find( {{b[j],j},1} ) != pq.end() )
                    {
                        pq.erase( pq.find( {{b[j],j},1} ) );
                        b[j]--;
                        if( b[j] != 0 )
                            pq.insert( {{b[j],j},1} );
                    }
                }
            }
        }
        
        
    }
    bool f=0;
    for(int i=1;i<=n;i++) if( !use[i] ) f=1;
    if(f) cout <<"IMPOSSIBLE";
    else
    {
        for(int i=1;i<=m;i++) cout << (ans[i]==1?'-':'+') << " " ;
    }
    
}
